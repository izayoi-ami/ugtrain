chromium-bsu

# Chromium B.S.U. 0.9.16.1-14.2, openSUSE Leap 42.3, 64 bit
#
# +3 Trainer: Lives, Shields, Ammo
#
# https://www.youtube.com/watch?v=mTpC30tSMqU
#
# adaptation too difficult - static memory pointer following is unpreferred
#
# This is a pointer following example from static memory to
# a single dynamic memory object - same method as in
# Cheat Engine.


# Macro for repetitive lives checks
define LIVES_CHECK check addr Lives i32 g 0


ptrmemstart HeroAircraft 288

Lives 0xbc i32 l 9 1,0 a
LIVES_CHECK
Damage 0xec f32 g -500.0 2,0 a
LIVES_CHECK
Shield prev+4 f32 l 1000.0 2,0 a
LIVES_CHECK

Score prev+4 f32 l 0 4,0 w

Ammo_0 0xd0 f32 l 150.0 3,0 a
Ammo_1 prev+4 f32 l 150.0 3,0 a
Ammo_2 prev+4 f32 l 150.0 3,0 a
Ammo_0_en 0x58 u8 l 1 3,0 a
Ammo_1_en prev+1 u8 l 1 3,0 a
Ammo_2_en prev+1 u8 l 1 3,0 a

ptrmemend


# Pointer in static memory pointing to the
# HeroAircraft object on the heap
HeroAircraftPtr 0x650f20 p HeroAircraft always
# important heap pointer check to make this safe
check this p e heap




# Discovery is also cumbersome and requires a gdb watchpoint and the
# gef framework for disassembly. But the size of the object remains hidden.

# Discovery example on openSUSE without PIE:
#
# $ ugtrain -SP chromium-bsu64_pointer.conf
# # find the number of lives with scanmem
# 1> list
# [ 0]      24ec83c,  2 +       18983c,  heap, 2, [I64 I32 I16 I8 ]
# 1> set 0=9
# info: setting *0x24ec83c to 0x9...
#
# $ gdb -p `pidof chromium-bsu`
# gef➤  watch *0x24ec83c
# Hardware watchpoint 1: *0x24ec83c
# gef➤  continue
# Continuing.
# # lose a live in the game and press 'p' key to pause it
# Thread 1 "chromium-bsu" hit Hardware watchpoint 1: *0x24ec83c
# Old value = 0x9
# New value = 0x8
# 0x00000000004140e3 in ?? ()
# ...
# $rbx   : 0x00000000024ec780  ...
# ...
#      0x4140dc                  sub    DWORD PTR [rbx+0xbc], 0x1
#  →   0x4140e3                  mov    DWORD PTR [rbx+0xec], 0x0
# ...
# gef➤  detach

# The important operation here is "sub    DWORD PTR [rbx+0xbc], 0x1"
# one line above the marker.
# The address of the HeroAircraft object is located in CPU register RBX.
# The lives are at offset 0xbc. So we need to look for a pointer pointing
# to 0x24ec83c - 0xbc = 0x24ec780 which is stored in RBX.
#
# 1> reset
# > option scan_data_type int64
# > lregions
# > dregion !0,1
# > lregions
# [ 0]       62d000,  143360 bytes,   exe,       400000, rw-, /usr/bin/chromium-bsu
# [ 1]       650000,    8192 bytes,   exe,       400000, rw-, unassociated
# > 0x24ec780
# 1> list
# [ 0]       650f20,  1 +       250f20,   exe, 38717312, [I64 ]
# 1> exit
# # terminate the game
#
# We are lucky here that we have a single match. The variable at static
# memory address 0x650f20 contains the current address of the HeroAircraft
# object. Further values can be discovered by guessing the object size,
# dumping the pointer memory in two states, and comparing them.
