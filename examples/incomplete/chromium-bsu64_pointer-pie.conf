chromium-bsu

# Chromium B.S.U. 0.9.16.1-lp150.1.1, openSUSE Leap 15.0, 64 bit, PIE
#
# +3 Trainer: Lives, Shields, Ammo
#
# https://www.youtube.com/watch?v=mTpC30tSMqU
#
# adaptation too difficult - static memory pointer following is unpreferred
#
# This is a PIE pointer following example from static memory to
# a single dynamic memory object - same method as in
# Cheat Engine.


# Macro for repetitive lives checks
define LIVES_CHECK check addr Lives i32 g 0


ptrmemstart HeroAircraft 288

Lives 0xbc i32 l 9 1,0 a
LIVES_CHECK
Damage 0xec f32 g -500.0 2,0 a
LIVES_CHECK
Shield prev+4 f32 l 1000.0 2,0 a
LIVES_CHECK

Score prev+4 f32 l 0 4,0 w

Ammo_0 0xd0 f32 l 150.0 3,0 a
Ammo_1 prev+4 f32 l 150.0 3,0 a
Ammo_2 prev+4 f32 l 150.0 3,0 a
Ammo_0_en 0x58 u8 l 1 3,0 a
Ammo_1_en prev+1 u8 l 1 3,0 a
Ammo_2_en prev+1 u8 l 1 3,0 a

ptrmemend


# Pointer in static memory pointing to the
# HeroAircraft object on the heap
HeroAircraftPtr 0x252e20 p HeroAircraft always
# important heap pointer check to make this safe
check this p e heap




# Discovery is also cumbersome and requires a gdb watchpoint and the
# gef framework for disassembly. But the size of the object remains hidden.

# Discovery example on openSUSE with PIE:
#
# $ ugtrain -SP chromium-bsu64_pointer-pie.conf
# # find the number of lives with scanmem
# 1> list
# [ 0] 560a8dad864c,  2 +      184364c,  heap, 2, [I64 I32 I16 I8 ]
# 1> set 0=9
# info: setting *0x560a8dad864c to 0x9...
# 1> pid
# info: target pid is 7664.
#
# $ gdb
# gef➤  pie attach 7664
# gef➤  watch *0x560a8dad864c
# Hardware watchpoint 1: *0x560a8dad864c
# gef➤  continue
# Continuing.
# # lose a live in the game and press 'p' key to pause it
# Thread 1 "chromium-bsu" hit Hardware watchpoint 1: *0x560a8dad864c
# Old value = 0x9
# New value = 0x8
# 0x0000560a8b05bb6c in ?? ()
# ...
# $rbx   : 0x0000560a8dad8590  ...
# ...
#    0x560a8b05bb65                  sub    DWORD PTR [rbx+0xbc], 0x1
#  → 0x560a8b05bb6c                  mov    QWORD PTR [rbx+0xec], 0x0
# ...
# gef➤  detach

# The important operation here is "sub    DWORD PTR [rbx+0xbc], 0x1"
# one line above the marker.
# The address of the HeroAircraft object is located in CPU register RBX.
# The lives are at offset 0xbc. So we need to look for a pointer pointing
# to 0x560a8dad864c - 0xbc = 0x560a8dad8590 which is stored in RBX.
#
# 1> reset
# > option scan_data_type int64
# > lregions
# > dregion !0,1
# > lregions
# [ 0] 560a8b275000,  143360 bytes,   exe, 560a8b046000, rw-, /usr/bin/chromium-bsu
# [ 1] 560a8b298000,    8192 bytes,   exe, 560a8b046000, rw-, unassociated
# > 0x560a8dad8590
# 1> list
# [ 0] 560a8b298e20,  1 +       252e20,   exe, 94603326621072, [I64 ]
# 1> exit
# # terminate the game
#
# We are lucky here that we have a single match. The variable at static
# memory match offset 0x252e20 + exe load address contains the current
# address of the HeroAircraft object. Further values can be discovered
# by guessing the object size, dumping the pointer memory in two states,
# and comparing them.
