endless-sky

# Endless Sky 0.9.6-lp151.3.2, openSUSE Leap 15.1, 64 bit, PIE

# +6 trainer: Shields/Hull, Fuel, Energy, Heat, Crew, Credits
#
# This game is a perfect example for values on the stack
# and C/C++ string watching by following a pointer. Configured
# stack value forward offsets are subtracted from __libc_stack_end
# provided by libmemhack and std::string is represented like a C
# string in memory.


# Macro for repetitive hull checks
define HULL_CHECK check addr Hull f64 g 2

# I had no clue that this game uses doubles which is quite
# unusual. I found this object by a unique name and searching
# for the found unique i64 char pointer. This constructor only
# allocates player ships when starting/loading the game.

dynmemstart Ship 3208 0x159e06 0x8

# Both C++ strings are allocated on the heap.
Name 0xf0 cstrp watch
Model 0x90 cstrp watch

# Main attributes, visible and worth freezing
Hull 0xb08 f64 max 1,0 a
HULL_CHECK
Shields 0xb00 f64 max 1,0 a
HULL_CHECK
Fuel 0xb10 f64 max 2,0 a
HULL_CHECK
Energy 0xb18 f64 max 3,0 a
HULL_CHECK
Heat 0xb20 f64 min 4,0 a
HULL_CHECK
# Useful when capturing a ship
Crew 0xb58 i32 max 5,0 a
HULL_CHECK

dynmemend


# EXPERIMENTAL: Value on stack
# Be careful with this for not corrupting the stack!
# Activate only if watching shows the correct value.

Credits stack 0x640 i64 l 500000000 A,X w
check this i64 g 1000


# Game website: https://endless-sky.github.io/
# Game source: https://github.com/endless-sky/endless-sky
# See: source/Ship.h
