cube2_client

# Cube 2: Sauerbraten 0.0.20140302-1, Ubuntu Linux 18.04, 64 bit, PIE
#
# +2 Trainer: Health, Ammo
#
# works adapted with 0.0.20100728.dfsg, 0.0.20130203.dfsg, 0.0.20140302-1
# works adapted with and without PIE + ASLR
#
# Here we hook on dynamic memory (C++ constructor) -
# single FPSent object.


# The number of pistol ammo is easy to find in memory.

# The sauerbraten shell script executes sauer_client.
game_call sauerbraten


dynmemstart FPSent 1456 0x2121b8 0x8

Health 0x180 i32 l 65535 1,0 a
MaxHealth prev+4 i32 l 65535 1,0 a
Armor prev+4 i32 l 65535 1,0 a
# 0: blue, 1: green, 2: yellow
ArmorType prev+4 i32 l 2 1,0 a

# 0=chainsaw, 1=shotgun, 2=chaingun, 3=rocketlauncher
# 4=rifle, 5=granadelauncher, 6=pistol
Ammo_0 prev+16 i32 l 250 2,0 a
Ammo_1 prev+4 i32 l 250 2,0 a
Ammo_2 prev+4 i32 l 250 2,0 a
Ammo_3 prev+4 i32 l 250 2,0 a
Ammo_4 prev+4 i32 l 250 2,0 a
Ammo_5 prev+4 i32 l 250 2,0 a
Ammo_6 prev+4 i32 l 250 2,0 a

dynmemend


# Adaptation
game_binpath /usr/lib/cube2/cube2_client
adapt_script adapt/sauerbraten_adapt64.sh
adapt_required 1


# real member names of struct fpsent from src/fpsgame/game.h:
# Health: struct fpsstate::health
# MaxHealth: struct fpsstate::maxhealth
# Armor: struct fpsstate::armour
# ArmorType: struct fpsstate::armourtype
# Ammo_0: struct fpsstate::ammo[GUN_FIRST]
# Ammo_1: struct fpsstate::ammo[GUN_SG]
# Ammo_2: struct fpsstate::ammo[GUN_CG]
# Ammo_3: struct fpsstate::ammo[GUN_RL]
# Ammo_4: struct fpsstate::ammo[GUN_RIFLE]
# Ammo_5: struct fpsstate::ammo[GUN_GL]
# Ammo_6: struct fpsstate::ammo[GUN_PISTOL]
